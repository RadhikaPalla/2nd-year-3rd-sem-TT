#include <stdio.h>

// Function to find the index of the minimum element (rotation pivot)
int findPivot(int arr[], int low, int high) {
    if (high < low) return -1; // No rotation
    if (high == low) return low;

    int mid = (low + high) / 2;

    if (mid < high && arr[mid] > arr[mid + 1])
        return mid + 1;
    if (mid > low && arr[mid] < arr[mid - 1])
        return mid;

    if (arr[high] > arr[mid])
        return findPivot(arr, low, mid - 1);
    else
        return findPivot(arr, mid + 1, high);
}

// Standard binary search
int binarySearch(int arr[], int low, int high, int key) {
    while (low <= high) {
        int mid = (low + high) / 2;
        if (arr[mid] == key)
            return mid;
        else if (arr[mid] < key)
            low = mid + 1;
        else
            high = mid - 1;
    }
    return -1;
}

int searchRotated(int arr[], int n, int key) {
    int pivot = findPivot(arr, 0, n - 1);

    if (pivot == -1) // Not rotated
        return binarySearch(arr, 0, n - 1, key);

    if (arr[pivot] == key)
        return pivot;

    if (key >= arr[0])
        return binarySearch(arr, 0, pivot - 1, key);
    else
        return binarySearch(arr, pivot, n - 1, key);
}

int main() {
    int n, key;

    printf("Enter number of elements: ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter %d elements of rotated sorted array:\n", n);
    for(int i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    printf("Enter element to search: ");
    scanf("%d", &key);

    int index = searchRotated(arr, n, key);

    if(index != -1)
        printf("Element %d found at position %d\n", key, index + 1);
    else
        printf("Element %d not found in the array\n", key);

    return 0;
}
